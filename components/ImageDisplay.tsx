import React, { useEffect, useRef } from 'react';
import { UserIcon, BotIcon, DownloadIcon } from './IconComponents';
import { Spinner } from './Spinner';
import type { Message } from '../App';

const TypingIndicator = () => (
    <div className="flex items-start gap-3 justify-start">
      <div className="w-8 h-8 flex-shrink-0 rounded-full bg-indigo-500 flex items-center justify-center">
        <BotIcon className="w-5 h-5 text-white" />
      </div>
      <div className="p-3 rounded-lg bg-gray-700 flex items-center">
         <div className="w-12 h-5 flex justify-around items-center">
            <span className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></span>
            <span className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></span>
            <span className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></span>
        </div>
      </div>
    </div>
);

interface ChatHistoryProps {
  messages: Message[];
  isLoading: boolean;
}

const ChatHistory: React.FC<ChatHistoryProps> = ({ messages, isLoading }) => {
  const endOfMessagesRef = useRef<HTMLDivElement>(null);

  const lastMessage = messages.length > 0 ? messages[messages.length - 1] : null;
  const showTypingIndicator = isLoading && lastMessage?.role === 'user';


  useEffect(() => {
    endOfMessagesRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages, isLoading]);

  const handleDownload = (e: React.MouseEvent, imageUrl?: string, prompt?: string) => {
    e.preventDefault();
    if (!imageUrl) return;

    const sanitizedPrompt = (prompt || 'generated_image').replace(/[^a-z0-9]/gi, '_').toLowerCase();
    const filename = `${sanitizedPrompt.substring(0, 50)}.jpeg`;

    const link = document.createElement('a');
    link.href = imageUrl;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="flex-grow p-4 space-y-6 overflow-y-auto">
      {messages.map((msg) => (
        <div key={msg.id} className={`flex items-start gap-3 w-full ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
          {msg.role === 'model' && (
            <div className="w-8 h-8 flex-shrink-0 rounded-full bg-indigo-500 flex items-center justify-center">
              <BotIcon className="w-5 h-5 text-white" />
            </div>
          )}
          <div className={`p-3 rounded-lg max-w-lg text-left shadow-md ${msg.role === 'user' ? 'bg-purple-600 text-white' : 'bg-gray-700 text-gray-200'}`}>
            <p className="text-sm whitespace-pre-wrap">{msg.text}</p>
             {msg.isLoadingImage && (
              <div className="flex justify-center items-center mt-3 p-4">
                <div className="w-8 h-8">
                  <Spinner />
                </div>
              </div>
            )}
            {msg.imageUrl && (
              <div className="relative mt-3 group">
                <img
                  src={msg.imageUrl}
                  alt={msg.prompt || 'Generated by AI'}
                  className="rounded-lg w-full h-auto object-cover transition-opacity duration-300 opacity-0"
                  onLoad={(e) => e.currentTarget.style.opacity = '1'}
                />
                <button
                  onClick={(e) => handleDownload(e, msg.imageUrl, msg.prompt)}
                  aria-label="Download image"
                  className="absolute top-2 right-2 p-1.5 bg-gray-900/50 rounded-full text-white opacity-0 group-hover:opacity-100 focus:opacity-100 transition-opacity duration-200 hover:bg-gray-900/75"
                >
                    <DownloadIcon className="w-5 h-5" />
                </button>
              </div>
            )}
          </div>
          {msg.role === 'user' && (
            <div className="w-8 h-8 flex-shrink-0 rounded-full bg-gray-600 flex items-center justify-center">
              <UserIcon className="w-5 h-5 text-white" />
            </div>
          )}
        </div>
      ))}
      {showTypingIndicator && !lastMessage?.isLoadingImage && <TypingIndicator />}
      <div ref={endOfMessagesRef} />
    </div>
  );
};

export default ChatHistory;